name: Build and Test

on:
  push:
    branches:
      - 'develop'
      - 'main'
  pull_request:
  schedule:
    - cron: '0 0 * * 1'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ (github.ref == 'refs/heads/main' && github.run_number) || github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      matrix:
        just_variants:
          - async-std
          - tokio
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        name: Enable Rust Caching
        with:
          shared-key: ""
          prefix-key: ${{ matrix.just_variants }}

      - name: Install Just
        run: |
          wget https://github.com/casey/just/releases/download/1.14.0/just-1.14.0-x86_64-unknown-linux-musl.tar.gz
          tar -vxf just-1.14.0-x86_64-unknown-linux-musl.tar.gz just
          sudo cp just /usr/bin/just

      - name: Unit and integration tests for all crates in workspace
        run: |
          just ${{ matrix.just_variants }} test-ci
        timeout-minutes: 60
        env:
          RUST_BACKTRACE: full


  test-self-hosted:
    strategy:
      matrix:
        just_variants:
          - async-std
          - tokio
      fail-fast: false
    runs-on: [self-hosted]
    container: ghcr.io/espressosystems/devops-rust:stable
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - uses: Swatinem/rust-cache@v2
        name: Enable Rust Caching
        with:
          prefix-key: ${{ matrix.just_variants }}

      - name: Unit and integration tests for all crates in workspace
        run: |
          just ${{ matrix.just_variants }} test-ci-fail-fast
        timeout-minutes: 60
        env:
          RUST_BACKTRACE: full

  build-release:
    strategy:
      matrix:
        just_variants:
          - async-std
          - tokio
      fail-fast: false
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        name: Enable Rust Caching
        with:
          shared-key: ""
          prefix-key: ${{ matrix.just_variants }}

      - name: Install Just
        run: |
          wget https://github.com/casey/just/releases/download/1.14.0/just-1.14.0-x86_64-unknown-linux-musl.tar.gz
          tar -vxf just-1.14.0-x86_64-unknown-linux-musl.tar.gz just
          sudo cp just /usr/bin/just

      - name: Build examples in release mode
        run: just ${{ matrix.just_variants }} build_release --examples --package hotshot-examples --no-default-features

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-amd64-${{ matrix.just_variants }}
          path: |
            target/${{ matrix.just_variants }}/release/examples/counter
            target/${{ matrix.just_variants }}/release/examples/multi-validator-libp2p
            target/${{ matrix.just_variants }}/release/examples/orchestrator-libp2p
            target/${{ matrix.just_variants }}/release/examples/validator-libp2p
            target/${{ matrix.just_variants }}/release/examples/multi-validator-webserver
            target/${{ matrix.just_variants }}/release/examples/multi-webserver
            target/${{ matrix.just_variants }}/release/examples/webserver
            target/${{ matrix.just_variants }}/release/examples/orchestrator-webserver
            target/${{ matrix.just_variants }}/release/examples/validator-webserver
            target/${{ matrix.just_variants }}/release/examples/cdn-broker
            target/${{ matrix.just_variants }}/release/examples/cdn-marshal



  build:
    strategy:
      matrix:
        just_variants:
          - async-std
          - tokio
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        name: Enable Rust Caching
        with:
          shared-key: ""
          prefix-key: ${{ matrix.just_variants }}

      - name: Install Just
        run: |
          wget https://github.com/casey/just/releases/download/1.14.0/just-1.14.0-x86_64-unknown-linux-musl.tar.gz
          tar -vxf just-1.14.0-x86_64-unknown-linux-musl.tar.gz just
          sudo cp just /usr/bin/just

      - name: Build all crates in workspace
        run: just ${{ matrix.just_variants }} build

  build-arm-release:
    strategy:
      matrix:
        just_variants:
          - async-std
          - tokio
      fail-fast: false
    needs: [test]
    runs-on: [self-hosted, arm64]
    container: ghcr.io/espressosystems/devops-rust:stable
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - uses: Swatinem/rust-cache@v2
        name: Enable Rust Caching
        with:
          shared-key: ""
          prefix-key: arm-${{ matrix.just_variants }}

      - name: Build examples in release mode
        run: just ${{ matrix.just_variants }} build_release --examples --package hotshot-examples --no-default-features

      - name: Upload Binaries
        uses: actions/upload-artifact@v4
        with:
          name: binaries-aarch64-${{ matrix.just_variants }}
          path: |
            target/${{ matrix.just_variants }}/release/examples/counter
            target/${{ matrix.just_variants }}/release/examples/multi-validator-libp2p
            target/${{ matrix.just_variants }}/release/examples/orchestrator-libp2p
            target/${{ matrix.just_variants }}/release/examples/validator-libp2p
            target/${{ matrix.just_variants }}/release/examples/multi-validator-webserver
            target/${{ matrix.just_variants }}/release/examples/multi-webserver
            target/${{ matrix.just_variants }}/release/examples/webserver
            target/${{ matrix.just_variants }}/release/examples/orchestrator-webserver
            target/${{ matrix.just_variants }}/release/examples/validator-webserver
            target/${{ matrix.just_variants }}/release/examples/cdn-broker
            target/${{ matrix.just_variants }}/release/examples/cdn-marshal

  build-dockers:
    strategy:
      matrix:
        just_variants:
          - async-std
          - tokio
      fail-fast: false
    runs-on: ubuntu-latest
    needs: [build-release, build-arm-release]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Docker BuildKit (buildx)
        uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Repo
        uses: docker/login-action@v3
        if: github.event_name != 'pull_request'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Download AMD executables
        uses: actions/download-artifact@v4
        with:
          name: binaries-amd64-${{ matrix.just_variants }}
          path: target/${{ matrix.just_variants }}/amd64/release/examples

      - name: Download ARM executables
        uses: actions/download-artifact@v4
        with:
          name: binaries-aarch64-${{ matrix.just_variants }}
          path: target/${{ matrix.just_variants }}/arm64/release/examples

      - name: Generate orchestrator-libp2p docker metadata
        uses: docker/metadata-action@v5
        id: orchestrator-libp2p
        with:
          images: ghcr.io/espressosystems/hotshot/orchestrator-libp2p
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Generate validator-libp2p docker metadata
        uses: docker/metadata-action@v5
        id: validator-libp2p
        with:
          images: ghcr.io/espressosystems/hotshot/validator-libp2p
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Generate webserver docker metadata
        uses: docker/metadata-action@v5
        id: webserver
        with:
          images: ghcr.io/espressosystems/hotshot/webserver
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Generate orchestrator-webserver docker metadata
        uses: docker/metadata-action@v5
        id: orchestrator-webserver
        with:
          images: ghcr.io/espressosystems/hotshot/orchestrator-webserver
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Generate validator-webserver docker metadata
        uses: docker/metadata-action@v5
        id: validator-webserver
        with:
          images: ghcr.io/espressosystems/hotshot/validator-webserver
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Generate cdn-broker docker metadata
        uses: docker/metadata-action@v5
        id: cdn-broker
        with:
          images: ghcr.io/espressosystems/hotshot/cdn-broker
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Generate cdn-marshal docker metadata
        uses: docker/metadata-action@v5
        id: cdn-marshal
        with:
          images: ghcr.io/espressosystems/hotshot/cdn-marshal
          flavor: suffix=-${{ matrix.just_variants }}

      - name: Build and push orchestrator-libp2p docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/orchestrator-libp2p.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.orchestrator-libp2p.outputs.tags }}
          labels: ${{ steps.orchestrator-libp2p.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

      - name: Build and push validator-libp2p docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/validator-libp2p.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.validator-libp2p.outputs.tags }}
          labels: ${{ steps.validator-libp2p.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

      - name: Build and push webserver docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/webserver.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.webserver.outputs.tags }}
          labels: ${{ steps.webserver.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

      - name: Build and push orchestrator-webserver docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/orchestrator-webserver.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.orchestrator-webserver.outputs.tags }}
          labels: ${{ steps.orchestrator-webserver.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

      - name: Build and push validator-webserver docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/validator-webserver.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.validator-webserver.outputs.tags }}
          labels: ${{ steps.validator-webserver.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

      - name: Build and push cdn-broker docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/cdn-broker.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.cdn-broker.outputs.tags }}
          labels: ${{ steps.cdn-broker.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

      - name: Build and push cdn-marshal docker
        uses: docker/build-push-action@v5
        with:
          context: ./
          file: ./docker/cdn-marshal.Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.cdn-marshal.outputs.tags }}
          labels: ${{ steps.cdn-marshal.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            ASYNC_EXECUTOR=${{ matrix.just_variants }}

  test-crypto:
    strategy:
      matrix:
        just_variants:
          - async-std
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        name: Checkout Repository

      - run: rustup toolchain install stable --profile minimal

      - uses: Swatinem/rust-cache@v2
        name: Enable Rust Caching
        with:
          shared-key: ""
          prefix-key: ${{ matrix.just_variants }}

      - name: Install Just
        run: |
          wget https://github.com/casey/just/releases/download/1.14.0/just-1.14.0-x86_64-unknown-linux-musl.tar.gz
          tar -vxf just-1.14.0-x86_64-unknown-linux-musl.tar.gz just
          sudo cp just /usr/bin/just
      - name: Crypto u`nit and integration tests for all crates in workspace
        run: |
          just ${{ matrix.just_variants }} test_crypto
        timeout-minutes: 60
        env:
          RUST_BACKTRACE: full
