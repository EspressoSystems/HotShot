(function() {
    var type_impls = Object.fromEntries([["request_response",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BoundedVecDeque%3CT%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/request_response/util.rs.html#11-28\">source</a><a href=\"#impl-BoundedVecDeque%3CT%3E\" class=\"anchor\">ยง</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"struct\" href=\"request_response/util/struct.BoundedVecDeque.html\" title=\"struct request_response::util::BoundedVecDeque\">BoundedVecDeque</a>&lt;T&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/request_response/util.rs.html#13-18\">source</a><h4 class=\"code-header\">pub fn <a href=\"request_response/util/struct.BoundedVecDeque.html#tymethod.new\" class=\"fn\">new</a>(max_size: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.82.0/std/primitive.usize.html\">usize</a>) -&gt; Self</h4></section></summary><div class=\"docblock\"><p>Create a new bounded <a href=\"https://doc.rust-lang.org/1.82.0/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque</code></a> with the given maximum size</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.push\" class=\"method\"><a class=\"src rightside\" href=\"src/request_response/util.rs.html#22-27\">source</a><h4 class=\"code-header\">pub fn <a href=\"request_response/util/struct.BoundedVecDeque.html#tymethod.push\" class=\"fn\">push</a>(&amp;mut self, item: T)</h4></section></summary><div class=\"docblock\"><p>Push an item into the bounded <a href=\"https://doc.rust-lang.org/1.82.0/alloc/collections/vec_deque/struct.VecDeque.html\" title=\"struct alloc::collections::vec_deque::VecDeque\"><code>VecDeque</code></a>, removing the oldest item if the\nmaximum size is reached</p>\n</div></details></div></details>",0,"request_response::OutgoingResponses","request_response::IncomingResponses"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[2055]}