[package]
authors = { workspace = true }
description = "HotShot Examples and binaries"
edition = { workspace = true }
name = "hotshot-examples"
readme = "README.md"
version = { workspace = true }
rust-version = "1.65.0"

[features]
default = ["docs", "doc-images", "hotshot-testing"]
gpu-vid = ["hotshot-task-impls/gpu-vid"]

# Features required for binaries
bin-orchestrator = ["clap"]

# Build the extended documentation
docs = []
doc-images = []
hotshot-testing = ["hotshot/hotshot-testing"]
randomized-leader-election = []
fixed-leader-election = []

# libp2p
[[example]]
name = "validator-libp2p"
path = "libp2p/validator.rs"

[[example]]
name = "multi-validator-libp2p"
path = "libp2p/multi-validator.rs"

[[example]]
name = "orchestrator-libp2p"
path = "libp2p/orchestrator.rs"

[[example]]
name = "all-libp2p"
path = "libp2p/all.rs"

# webserver
[[example]]
name = "webserver"
path = "webserver/webserver.rs"

[[example]]
name = "orchestrator-webserver"
path = "webserver/orchestrator.rs"

[[example]]
name = "validator-webserver"
path = "webserver/validator.rs"

[[example]]
name = "multi-validator-webserver"
path = "webserver/multi-validator.rs"

[[example]]
name = "multi-webserver"
path = "webserver/multi-webserver.rs"

[[example]]
name = "all-webserver"
path = "webserver/all.rs"

# combined
[[example]]
name = "all-combined"
path = "combined/all.rs"

[[example]]
name = "multi-validator-combined"
path = "combined/multi-validator.rs"

[[example]]
name = "validator-combined"
path = "combined/validator.rs"

[[example]]
name = "orchestrator-combined"
path = "combined/orchestrator.rs"

# Push CDN
[[example]]
name = "all-push-cdn"
path = "push-cdn/all.rs"

[[example]]
name = "validator-push-cdn"
path = "push-cdn/validator.rs"

[[example]]
name = "cdn-broker"
path = "push-cdn/broker.rs"

[[example]]
name = "cdn-marshal"
path = "push-cdn/marshal.rs"

[[example]]
name = "whitelist-push-cdn"
path = "push-cdn/whitelist-adapter.rs"

[dependencies]
async-broadcast = { workspace = true }
async-compatibility-layer = { workspace = true }
async-lock = { workspace = true }
async-trait = { workspace = true }
bimap = "0.6"
clap = { workspace = true, optional = true }
committable = { workspace = true }
custom_debug = { workspace = true }
dashmap = "5"
either = { workspace = true }
futures = { workspace = true }
hotshot-web-server = { version = "0.5.26", path = "../web_server", default-features = false }
hotshot-orchestrator = { version = "0.5.26", path = "../orchestrator", default-features = false }
hotshot-types = { path = "../types" }
hotshot-task-impls = { path = "../task-impls", version = "0.5.26", default-features = false }
libp2p-identity = { workspace = true }
libp2p-networking = { workspace = true }
rand = { workspace = true }
serde = { workspace = true, features = ["rc"] }
snafu = { workspace = true }
surf-disco = { workspace = true }
time = { workspace = true }
derive_more = "0.99"
portpicker = "0.1"
lru = "0.12"
hotshot-task = { path = "../task" }
hotshot = { path = "../hotshot" }
hotshot-example-types = { path = "../example-types" }
chrono = "0.4"
vbs = { workspace = true }
sha2.workspace = true
local-ip-address = "0.6"

tracing = { workspace = true }

[target.'cfg(all(async_executor_impl = "tokio"))'.dependencies]
tokio = { workspace = true }
cdn-client = { workspace = true, features = ["runtime-tokio"] }
cdn-broker = { workspace = true, features = [
  "runtime-tokio",
  "strong-consistency",
  "global-permits",
] }
cdn-marshal = { workspace = true, features = ["runtime-tokio"] }

[target.'cfg(all(async_executor_impl = "async-std"))'.dependencies]
async-std = { workspace = true }
cdn-client = { workspace = true, features = ["runtime-async-std"] }
cdn-broker = { workspace = true, features = [
  "runtime-async-std",
  "strong-consistency",
  "global-permits",
] }
cdn-marshal = { workspace = true, features = ["runtime-async-std"] }

[dev-dependencies]
clap.workspace = true
toml = { workspace = true }
blake3 = { workspace = true }
anyhow.workspace = true
tracing-subscriber = "0.3"

[lints]
workspace = true
