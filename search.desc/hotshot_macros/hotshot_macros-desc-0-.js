searchState.loadedDescShard("hotshot_macros", 0, "Macros for use in testing.\ndescription of a crosstest\nBuilder for <code>CrossTestData</code>.\nError type for CrossTestDataBuilder\nrequisite data to generate a single test\nBuilder for <code>TestData</code>.\nError type for TestDataBuilder\ntrait make a string lower and snake case\nBracketed types, e.g. [A, B, C] These types can have …\nBuilder for <code>TypePathBracketedArray</code>.\nError type for TypePathBracketedArrayBuilder\nUninitialized field\nUninitialized field\nUninitialized field\nCustom validation error\nCustom validation error\nCustom validation error\nBuilds a new <code>TypePathBracketedArray</code>.\nBuilds a new <code>CrossTestData</code>.\nBuilds a new <code>TestData</code>.\nbuilder implementation\nbuilder implementation\nbuilder implementation\nbuilder impl\nbuilder impl\nbuilder impl\nCreate an empty builder, with all fields set to <code>None</code> or …\nCreate an empty builder, with all fields set to <code>None</code> or …\nCreate an empty builder, with all fields set to <code>None</code> or …\nGenerate a cartesian product of tests across all types …\nHelper function to do the actual code gen allow panic …\nelems\nelems\nelems\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngenerate the code for a single test\nwhether or not to ignore\nwhether or not to ignore the test\nwhether or not to ignore\nwhether or not to ignore\nwhether or not to ignore the test\nwhether or not to ignore the test\nimplementations\nimplementations\nimplementations\nimpl\nimpl\nimpl\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nif we’ve extracted all the metadata\nmacro specific custom keywords\ntest description/spec\ntest description\ntest description/spec\ntest description/spec\ntest description\ntest description\nallow panic because this is a compiler error\nallow panic because this is a compiler error\nMacro to run the test suite with <code>TaskState</code> scripts at once …\nname of the test\nname of test\nname of the test\nname of the test\nname of test\nname of test\nMacro to test multiple <code>TaskState</code> scripts at once.\nmake a lower and snake case string\ntype\ntype\ntype\ntypes\ntypes\ntypes\nimpl\nimpl\nimpl\nversions\nversions\nversions\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")