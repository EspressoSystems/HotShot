searchState.loadedDescShard("hotshot_types", 0, "Types and Traits for the <code>HotShot</code> consensus module\nPinned future that is Send and Sync\nHolds configuration for a <code>HotShot</code>\nstructure of peers’ config, including public key, stake …\nconfig for validator, including public key, private key, …\nyoinked from futures crate\nyoinked from futures crate, adds sync bound that we need\nThe maximum amount of time a leader can wait to get a …\nBuilder API base URL\nThis module provides the <code>Bundle</code> type\nProvides the core consensus types\nconfigurable constants for hotshot\nList of DA committee (staking)nodes for static DA committee\nProvides types useful for representing <code>HotShot</code>’s data …\ntime to wait until we request data associated with a …\nHolds the types and functions for DRB computation.\nNumber of blocks in an epoch, zero means there are no …\nError type for <code>HotShot</code>\nEvents that a <code>HotShot</code> instance can emit\nNumber of fixed leaders for GPU VID, normally it will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize a peer’s config from bytes\ngenerate validator config from input seed, index, stake …\nHolds the configuration file specification for a HotShot …\nHelper macro for trivial implementation of the <code>HasEpoch</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether or not this validator is DA\nAll public keys known to be DA nodes\nList of known node’s public keys and stake value for …\nTypes and structs associated with light client state\nNetwork message types\nHolds the network configuration specification for HotShot …\nBase duration for next-view timeout, in milliseconds\nNumber of network bootstrap nodes\nTotal number of nodes in the network\nThe validator’s private key, should be in the mempool, …\nget the public config of the validator\nThe validator’s public key and stake value\nImplementation for <code>BitVectorQc</code> that uses BLS signature + …\nTypes for the request/response implementations. This …\nUpdate a hotshot config to have a view-based upgrade.\nTypes and structs for the hotshot signature keys\nImplementations of the simple certificate type.  Used for …\nImplementations of the simple vote types.\nTypes and structs related to the stake table\nThe peer’s public key and stake value\nThe validator’s stake\nUnix time in seconds at which we start proposing an upgrade\nView to start proposing an upgrade\nThe proportion of nodes required before the orchestrator …\nUnix time in seconds at which we start voting on an upgrade\nView to start voting on an upgrade\nthe validator’s key pairs for state signing/verification\nthe peer’s state public key\nUnix time in seconds at which we stop proposing an …\nView to stop proposing an upgrade. To prevent proposing an …\nUnix time in seconds at which we stop voting on an …\nView to stop voting on an upgrade. To prevent voting on an …\nSerialize a peer’s config to bytes\nCommon traits for the <code>HotShot</code> protocol\nHolds the upgrade configuration specification for HotShot …\nUtility functions, type aliases, helper structs and enum …\nHolds the validator configuration specification for …\nThis module provides:\nDuration of view sync round timeouts\nVote, Accumulator, and Certificate Types\nThe Bundle for a portion of a block, provided by a …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe fee for sequencing\nThe signature over the bundle.\nThe bundle transactions sent by the builder.\nAlias for the block payload commitment and the associated …\nA type alias for <code>HashMap&lt;Commitment&lt;T&gt;, T&gt;</code>\nA reference to the consensus algorithm\nContains several <code>ConsensusMetrics</code> that we’re interested …\nA thin wrapper around <code>RwLockReadGuard</code> for <code>Consensus</code> that …\nA thin wrapper around <code>RwLockUpgradableReadGuard</code> for …\nA thin wrapper around <code>RwLockWriteGuard</code> for <code>Consensus</code> that …\nA bundle of views that we have most recently performed …\nType alias for consensus state wrapped in a lock.\nA thin wrapper around <code>LockedConsensusState</code> that helps …\nA type alias for …\nauction result that the block was produced from, if any\nView number this block is for\nBuilder Commitment\nAssociated helper function: Takes <code>LockedConsensusState</code> …\nReturns true if the <code>parent_leaf</code> formed an eQC for the …\nGarbage collects based on state change right now, this …\nVid Commitment\nGet the current epoch.\nEpoch number that is currently on.\nGet the current view.\nView number that is currently on.\nThe current view\nView we last proposed to the DA committee\nView we lasted voted for DA proposal\nGets the last decided leaf.\nGets the last decided validated state.\nNumber of blocks in an epoch, zero means there are no …\nBuilder fee data\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate HotShotActionViews from a view number\nGet the high QC.\nthe highqc per spec\nInner <code>LockedConsensusState</code>\nNumber of events in the hotshot event queue\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of invalid QCs we’ve seen since the last commit.\nReturns true if our high QC is for the last block in the …\nReturns true if our high qc is forming an eQC\nReturns true if the given leaf can form an extended Quorum …\nReturns true if a given leaf is for the last block in the …\nReturn true if the given leaf takes part in forming an …\nReturn true if the QC takes part in forming an eQC, i.e. …\nBundle of views which we performed the most recent action …\nNumber of timestamp for the last decided time\nGet the last decided view.\nlast view had a successful decide event\nThe number of last decided view\nGet the map of our recent proposals\nLast proposals we sent out, None if we haven’t proposed …\nThe number of last synced block height\nThe number of the last voted view\nInner <code>RwLockReadGuard</code>\nInner <code>RwLockWriteGuard</code>\nInner <code>RwLockUpgradableReadGuard</code>\nGet the locked view.\nThe <code>locked_qc</code> view number\nMetadata for the block payload\nA reference to the metrics trait\nCreates a new instance of <code>ConsensusReadLockGuard</code> with the …\nCreates a new instance of <code>ConsensusWriteLockGuard</code> with the …\nCreates a new instance of <code>ConsensusUpgradableReadLockGuard</code> …\nCreate a new instance of <code>OuterConsensus</code>, hopefully …\nConstructor.\nCreate a new instance of this <code>ConsensusMetricsValue</code> …\nGet the next epoch high QC.\nThe high QC for the next epoch\nThe number of empty blocks that have been proposed\nNumber of views that timed out\nNumber of views that timed out as leader\nNumber of views that are in-flight since the last anchor …\nNumber of views that are in-flight since the last decided …\nNumber of outstanding transactions\nMemory size in bytes of the serialized transactions still …\nGet the parent Leaf Info from a given leaf and our public …\nView we last proposed in to the Quorum\nLocks inner consensus for reading and leaves debug traces\nreset last actions to genesis so we can resend events in …\nGet the saved DA certs.\nAll the DA certs we’ve received for current and future …\nGet the saved leaves.\nMap of leaf hash -&gt; leaf\nGet the saved payloads.\nSaved payloads.\nGets the validated state with the given view number, if in …\nGets the validated state and state delta with the given …\nA helper bool to indicate whether inner lock has been …\nTries to acquire read lock on inner consensus and leaves …\nTries to acquire write lock on inner consensus and leaves …\nUpdate the last actioned view internally for votes and …\nUpdate the validated state map with a new view_number/view …\nUpdate the current epoch.\nUpdate the high QC if given a newer one.\nUpdate the last decided view.\nUpdate the validated state map with a new view_number/view …\nUpdate the locked view.\nUpdate the next epoch high QC if given a newer one.\nUpdate the last proposal.\nAdd a new entry to the da_certs map.\nUpdate the saved leaves with a new leaf.\nUpdate the saved payloads with a new encoded transaction.\nUpdate the validated state map with a new view_number/view …\nAdd a new entry to the vid_shares map.\nUpdate the current view.\nAcquires upgradable read lock on inner consensus and …\nUpgrades the inner <code>RwLockUpgradableReadGuard</code> and leaves …\nGet the validated state map.\nThe validated states that are currently loaded in memory.\nGet the vid shares.\nAll the VID shares we’ve received for current and future …\nDuration of views as leader\ngather information from the parent chain of leaves\nView we last voted in for a QuorumProposal\nLocks inner consensus for writing and leaves debug traces\ntimeout for fetching auction results from the solver\ntimeout for fetching bundles from builders\nthe number of messages to cache in the combined network\nthe default delay duration value in milliseconds of …\nthe number of messages to attempt to send over the primary …\nthe number of messages to send over the secondary network …\nDefault channel size for consensus event sharing\nDefault channel size for HotShot -&gt; application …\nthe default kademlia record republication interval (in …\nThe <code>tide</code> module name for the legacy builder\nthe number of views to gather information for ahead of time\nThe <code>tide</code> module name for the marketplace builder\ndefault number of rounds to run\ndefault number of transactions per round\ndefault size of transactions\nThe default network data request delay in milliseconds\nFor <code>STAKE_TABLE_CAPACITY=200</code>, the light client prover …\nThe offset for how far in the future the upgrade actually …\nThe offset for how far in the future the upgrade …\nThe offset for how far in the future the upgrade ends.\nThe offset for how far in the future we will send out a …\nThe error type for block and its transactions.\nA proposal to start providing data availability for a …\nA proposal to start providing data availability for a …\nType-safe wrapper around <code>u64</code> so we know the thing we’re …\nThe payload commitment does not match the block header’s …\nThe block header is invalid\nThis is the consensus-internal analogous concept to a …\nThis is the consensus-internal analogous concept to a …\nType of nodes participating in the network.\nA packed bundle constructed from a sequence of bundles.\nProposal to append a block.\nProposal to append a block.\nAdditional functions required to use a <code>Leaf</code> with …\nHolds a timeout certificate.\nA proposal to upgrade the network\nVID dispersal data\nVID share and associated metadata for a single node\nVID share and associated metadata for a single node\nHelper type to encapsulate the various ways that proposal …\nType-safe wrapper around <code>u64</code> so we know the thing we’re …\nHolds a view sync finalized certificate.\nThe auction results for the block, if it was produced as …\nThe block header contained in this leaf.\nThe block header contained in this leaf.\nThe block header to append\nThe block header to append\nBlock header.\nBlock header.\nGet a mutable reference to the block header contained in …\nGet a mutable reference to the block header contained in …\nOptional block payload.\nOptional block payload.\nOptional block payload.\nOptional block payload.\nCalculate the vid disperse information from the payload …\nCalculate the leaf commitment, which is gated on the …\nVID common data sent to all storage nodes\nVID common data sent to all storage nodes\nVID common data sent to all storage nodes\nCreate a transaction that can be added to the block …\nVidCommitment calculated based on the number of nodes in …\nVidCommitment calculated based on the number of nodes in …\nThe DRB result for the current epoch.\nThe DRB result for the current epoch.\nThe DRB seed for the next epoch.\nThe DRB seed for the next epoch.\nEncoded transactions in the block to be applied.\nEncoded transactions in the block to be applied.\nThe combined transactions as bytes.\nEpoch in which this leaf was created.\nEpoch this proposal applies to\nEpoch this proposal applies to\nEpoch this proposal applies to\nEpoch the data of this proposal belongs to\nThe epoch number for which this VID data belongs to\nAn epoch to which the data belongs to. Relevant for …\nThe view number that this block is associated with.\nValidate that a leaf has the right upgrade certificate to …\nValidate that a leaf has the right upgrade certificate to …\nFake the thing a genesis block points to. Needed to avoid …\nFill this leaf with the block payload.\nFill this leaf with the block payload.\nFill this leaf with the block payload, without checking …\nFill this leaf with the block payload, without checking …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate VID dispersal from a specified membership for the …\nConstructs a leaf from a given quorum proposal.\nConstructs a leaf from a given quorum proposal.\nCreate a vector of <code>VidDisperseShare</code> from <code>VidDisperse</code>\nCreate a vector of <code>VidDisperseShare</code> from <code>VidDisperse</code>\nCreate a genesis number (0)\nCreate a genesis number (0)\nCreate a new leaf from its components.\nCreate a new leaf from its components.\nHeight of this leaf in the chain.\nHeight of this leaf in the chain.\nImplements <code>ConsensusTime</code>, <code>Display</code>, <code>Add</code>, <code>AddAssign</code>, <code>Deref</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck that the given ViewChangeEvidence is relevant to the …\nThe QC linking this leaf to its parent in the chain.\nThe QC linking this leaf to its parent in the chain.\nPer spec, justification\ncertificate that the proposal is chaining from\nPer spec, justification\nPer spec, justification\nMetadata of the block to be applied.\nMetadata of the block to be applied.\nThe metadata of the block.\nCreate a new number with the given value.\nCreate a new number with the given value.\nCreate a new <code>PackedBundle</code>.\ncertificate that the proposal is chaining from formed by …\ncertificate that the proposal is chaining from formed by …\nCommitment to this leaf’s parent.\nCommitment to this leaf’s parent.\nThe hash of the parent <code>Leaf</code> So we can ask if it extends\nThe hash of the parent <code>Leaf</code> So we can ask if it extends\nA commitment to the block payload contained in this leaf.\nA commitment to the block payload contained in this leaf.\nVidCommitment calculated based on the number of nodes in …\nBlock payload commitment\nBlock payload commitment\nPossible timeout or view sync certificate.\ncreate a random commitment\na public key of the share recipient\na public key of the share recipient\nThe sequencing fee for submitting bundles.\nSerialization for the QC assembled signature\nA storage node’s key and its corresponding VID share\nA storage node’s key and its corresponding VID share\nA storage node’s key and its corresponding VID share\nEpoch to which the recipients of this VID belong to\nThe epoch number to which the recipient of this VID …\nConsume <code>self</code> and return a <code>Proposal</code>\nConsume <code>self</code> and return a <code>Proposal</code>\nCreate <code>VidDisperse</code> out of an iterator to <code>VidDisperseShare</code>s\nCreate <code>VidDisperse</code> out of an iterator to <code>VidDisperseShare</code>s\nSplit a VID share proposal into a proposal for each …\nSplit a VID share proposal into a proposal for each …\nReturn the u64 format\nReturn the u64 format\nTake the block payload from the leaf and return it if it …\nTake the block payload from the leaf and return it if it …\nThe QC linking this leaf to its parent in the chain.\nThe QC linking this leaf to its parent in the chain.\nPossible upgrade certificate, which the leader may …\nPossible upgrade certificate, which the leader may …\nOptional upgrade certificate, if one was attached to the …\nOptional upgrade certificate, if one was attached to the …\nThe information about which version we are upgrading to.\nThe Vid precompute for the block.\nPossible timeout or view sync certificate. If the …\nPossible timeout or view sync certificate. If the …\nTime when this leaf was created.\nTime when this leaf was created.\nView this proposal applies to\nView this proposal applies to\nView this proposal applies to\nThe view number for which this VID data is intended\nThe view number for which this VID data is intended\nThe view number for which this VID data is intended\nCurView from leader when proposing leaf\nview number for the proposal\nCurView from leader when proposing leaf\nCurView from leader when proposing leaf\nThe view number that this block is associated with.\nBuilder fee data for a null block payload\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe commitment for a null block payload.\nArbitrary number of times the hash function will be …\nAlias for DRB result from <code>compute_drb_result</code>.\nAlias for DRB seed input for <code>compute_drb_result</code>, …\nDRB result for epoch 1 and 2.\nDRB seed input for epoch 1 and 2.\nCompute the DRB result for the leader rotation.\nDifficulty level of the DRB calculation.\nUse the DRB result to get the leader.\nFailed to deserialize data\nFailed to serialize data\nError type for <code>HotShot</code>\nThe consensus state machine is in an invalid state\nLeader is in a Prepare phase and timed out before the …\nLeader is waiting for commit votes\nLeader is in a Prepare phase and is waiting for a HighQc\nLeader is waiting for precommit votes\nLeader is waiting for prepare votes\nLeaf was not present in storage\nReplica is waiting for a commit message\nReplica is waiting for a decide message\nReplica is waiting for a pre-commit message\nReplica is waiting for a prepare message\nContains information about what the state of the …\nHotShot-testing tried to collect round events, but it …\nThe view timed out\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe state that the round was in when it timed out\nThe view number that timed out\nDA certificate was sent\nDA proposal was received from the network or submitted to …\nDA proposal was sent\nDA vote was sent\nA new decision event was issued\nA view encountered an error and was interrupted\nA status event emitted by a <code>HotShot</code> instance\nThe type and contents of a status event emitted by a …\nA message destined for external listeners was received\nA list of actions that we track for nodes\nThe chain of decided leaves with its corresponding state …\nDecided leaf with the corresponding state and VID info.\nA quorum proposal was sent\nQuorum proposal was received from the network or submitted …\nA replica task was canceled by a timeout interrupt\nNew transactions were received from the network or …\nUpgrade proposal was received from the network or …\nAn upgrade proposal was sent\nAn upgrade vote was sent\nVID shares were sent\nThe view has finished.  If values were decided on, a <code>Decide</code>…\nView Sync Vote\nThe view timed out\nA quorum vote was sent\nOptional application-specific state delta.\nUtilities for converting between HotShotError and a string.\nThe underlying event\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecided leaf.\nConstructor.\nValidated state.\nOptional VID share data.\nThe view number that this event originates from\nOptional information of the number of transactions in the …\nSerialized data of the message\nThe underlying error\nThe chain of Leaves that were committed by this decision\nContents of the proposal\nContents of the proposal\nContents of the proposal\nThe QC signing the most recent leaf in <code>leaf_chain</code>.\nPublic key of the leader submitting the proposal\nPublic key of the leader submitting the proposal\nPublic key of the leader submitting the proposal\nPublic Key of the message sender\nThe list of transactions\nThe view that timed out\nThe view number that has just finished\nThe view that timed out\nConvert a string into a HotShotError\nConvert a HotShotError into a string\nHolds configuration for a <code>HotShot</code>\nThe maximum amount of time a leader can wait to get a …\nBuilder API base URL\nTime to wait until we request data associated with a …\nDefault builder URL, used as placeholder\nNumber of blocks in an epoch, zero means there are no …\nNumber of fixed leaders for GPU VID\nReturns the argument unchanged.\nCreates a new <code>HotShotConfigFile</code> with 5 nodes and 10 DA …\nCalls <code>U::from(self)</code>.\nThe known DA nodes’ public key and stake values\nThe known nodes’ public key and stake value\nBase duration for next-view timeout, in milliseconds\nNumber of network bootstrap nodes\nTotal number of staked nodes in the network\nNumber of staking DA nodes\nThe proportion of nodes required before the orchestrator …\nUpgrade config\nDuration for view sync round timeout\nBase field in the prover circuit\nA light client state\nPublic input to the light client state prover service\nStake table state\nConcrete type for light client state\nConcrete for circuit’s public input\nConcrete type for stake table state\nKey pairs for signing/verifying a light client state\nSigning key for signing a light client state\nSignatures\nRequest body to send to the state relay server\nSignature scheme\nThe state signatures bundle is a light client state and …\nVerification key for verifying state signatures\nTotal stakes associated with the signer\nCommitments to the table column for Stake amounts\nCommitments to the table column for Stake amounts\nReturn the block commitment root of the light client state\nRoot of the block commitment tree\nRoot of the block commitment tree\nReturn the block height of the light client state\nCurrent block height\nCurrent block height\nCommitments to the table column for BLS public keys\nCommitments to the table column for BLS public keys\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate key pairs from private signing keys\nGenerate key pairs from <code>thread_rng()</code>\nGenerate key pairs from seed\nGenerate key pairs from an index and a seed\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe public key associated with this request\nConstruct a public input from light client state and …\nReturn the qc key commitment of the light client state\nCommitments to the table column for Schnorr public keys\nCommitments to the table column for Schnorr public keys\nThe associated signature of the light client state\nThe collected signatures\nReturn the stake amount commitment of the light client …\nReturn the stake table commitment of the light client state\nThe associated light client state\nThe state for this signatures bundle\nReturn the state key commitment of the light client state\nReturn the threshold\nthreshold\nthreshold\nReturn the view number of the light client state\nCurrent view number\nCurrent view number\nBroadcast to all\nMessages related to the consensus protocol\nMessages related to the sequencing consensus protocol for …\nMessage with a DAC.\nCertificate data is available\nCertificate data is available\nMessages related to the sequencing consensus protocol for …\nProposal for data availability committee\nProposal for data availability committee\nvote for data availability committee\nvote for data availability committee\nData message\nMessages relating to sharing data between nodes\nTODO: Put <code>DataResponse</code> content in a <code>Box</code> to make enum …\nA response to a data request\nSend a message directly to a key\nA message to be passed through to external listeners\nA (still serialized) message to be passed through to …\nMessages related to validating and sequencing consensus\nMessages related to both validating and sequencing …\nMessage for the next leader containing our highest QC\nMessage for internal use\nMessage with most recent [quorum/DA] proposal the server …\nMessage with most recent view sync certificate the server …\nSend a message directly to many keys\nIncoming message\nEnum representation of any message type\nA message type agnostic description of a message’s …\nA wrapper type for implementing <code>PassType</code> on a vector of …\nPrepare qc from the leader\nMessage with a [quorum/DA] proposal.\nMessage with a quorum proposal.\nMessage with a quorum proposal.\nA peer node needs a proposal from the leader.\nA replica has responded with a valid proposal.\nA replica has responded with a valid proposal.\nList of keys to send a message to, or broadcast to all …\nA request for data\nMessages for sequencing consensus.\nContains a transaction to be submitted TODO rethink this …\nMessage with a Timeout vote\nMessage with a Timeout vote\nA lock for an upgrade certificate decided by HotShot, …\nMessage with an upgrade proposal.\nMessage with an upgrade proposal\nUpgrade vote.\nMessage with an upgrade vote\nVID disperse, like <code>Proposal</code>.\nInitiate VID dispersal.\nInitiate VID dispersal.\nMessage with a view sync certificate.\nMessage with a view sync commit certificate\nMessage with a view sync commit certificate\nMessage with a view sync commit vote\nMessage with a view sync commit vote\nMessage with a view sync finalize certificate\nMessage with a view sync finalize certificate\nMessage with a view sync finalize vote\nMessage with a view sync finalize vote\nMessage with a view sync pre-commit certificate\nMessage with a view sync pre-commit certificate\nMessage with a view sync pre-commit vote\nMessage with a view sync pre-commit vote\nMessage with a view sync vote.\nMessage with a quorum vote.\nMessage with a quorum vote.\nMessage with a quorum vote.\nPhantom for TYPES\nphantom data for the <code>Versions</code> trait\nConvert a <code>Proposal</code> by converting the underlying proposal …\nThe data being proposed.\na shared lock to an upgrade certificate decided by …\nDeserialize a message with a version number, using …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>UpgradeLock</code> from an optional upgrade …\nConstruct a <code>MessageKind</code> from <code>SequencingMessage</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe message kind\nCreate a new <code>UpgradeLock</code> for a fresh instance of HotShot\nThe sender of this message\nSerialize a message with a version number, using …\nThe proposal must be signed by the view leader\nChecks that the signature of the quorum proposal is valid.\nChecks that the signature of the quorum proposal is valid.\nCalculate the version applied in a view, based on the …\nCalculate the version applied in a view, based on the …\nget the view number out of a message\nGet the view number this message relates to\nconfiguration for builder type to use\nconfiguration for combined network\nFailed to deserialize loaded NetworkConfig\nUse external builder, [config.builder_url] must be set to …\nFailed to recursively create path to NetworkConfig\nwe source the network configuration from a config file on …\nConfiguration describing a libp2p node\na network configuration\na network configuration error\na network config stored in a file\nthe source of the network config\nwe source the network configuration from the orchestrator\nNode PeerConfig keys\na network config stored in a file\nRandom integrated builder will be started and used by each …\nOptions controlling how the random builder generates blocks\nFailed to read NetworkConfig from file\nFailed to serialize NetworkConfig\nSimple integrated builder will be started and used by each …\nFailed to write NetworkConfig to file\nHow many blocks to generate per second\nThe bootstrap nodes to connect to (multiaddress, …\nbuilder to use\nbuilder to use\nThe maximum amount of time a leader can wait to get a …\nThe address for the Push CDN’s “marshal”, A.K.A. …\nThe address of the Push CDN’s “marshal”, A.K.A. load …\ncombined network config\ncombined network config\nthe commit this run is based on\nthe hotshot config\nthe hotshot config file\nwhether the node is a DA node\ntime to wait until we request data associated with a …\ndelay duration before sending a message through the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLoads a <code>NetworkConfig</code> from a file.\nGet a temporary node index for generating a validator …\nwhether DA membership is determined by index. if true, the …\nnumber of views to run\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nname of the key type (for debugging)\nthe libp2p config\npassword to have the orchestrator start the network, …\npassword to have the orchestrator start the network, …\ntimeout before starting the next view\nglobal index of node (for testing purposes a uid)\nglobal index of node (for testing purposes a uid)\nnumber of bootstrap nodes\nThe list of public keys that are allowed to connect to the …\nThe list of public keys that are allowed to connect to the …\nThe list of public keys that are allowed to connect to the …\nrandom builder config\nrandom builder configuration\nnumber of views to run\nnumber of views to run\nunique seed (for randomness? TODO)\nunique seed (for randomness? TODO)\nthe peer’s stake\nThe peer’s public key\nthe peer’s state public key\nSerializes the <code>NetworkConfig</code> and writes it to a file.\nsize of transactions\nsize of transactions\nnumber of transactions per view\nnumber of transactions per view\nHow many transactions to include in a block\nRange of how big a transaction can be (in bytes)\ntimeout before starting next view sync round\nAn implementation of QC using BLS signature and a …\nPublic parameters of <code>BitVectorQc</code>\npublic parameter for the aggregated signature scheme\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSign a message with the signing key\nthe stake table (snapshot) this QC is verified against\nthreshold for the accumulated “weight” of votes to …\nA signed request for a proposal.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOur public key. The ensures that the recipient can reply to\nThe view number that we’re requesting a proposal for.\nBLS private key used to sign a message\nBLS public key used to verify a signature\nPublic parameters for BLS signature scheme\nBuilder signature key\nType alias for a <code>DaCertificate</code>, which is a …\nType alias for a <code>DaCertificate2</code>, which is a …\nType alias for a <code>QuorumCertificate2</code>, which is a …\nDefines a threshold which is f + 1 (i.e at least one of …\nType alias for a <code>QuorumCertificate</code>, which is a …\nType alias for a <code>QuorumCertificate2</code>, which is a …\nA certificate which can be created by aggregating many …\nDefines a threshold which is 2f + 1 (Amount needed for …\nTrait which allows use to inject different threshold …\nType alias for a Timeout certificate over a view number\nType alias for a <code>TimeoutCertificate2</code>, which is a …\nType alias for a <code>UpgradeCertificate</code>, which is a …\nDefines a threshold which is 0.9n + 1 (i.e. over 90% of …\nType alias for a <code>ViewSyncCommit</code> certificate over a view …\nType alias for a <code>ViewSyncCommitCertificate2</code>, which is a …\nType alias for a <code>ViewSyncFinalize</code> certificate over a view …\nType alias for a <code>ViewSyncFinalizeCertificate2</code>, which is a …\nType alias for a <code>ViewSyncPreCommit</code> certificate over a view …\nType alias for a <code>ViewSyncPreCommitCertificate2</code>, which is a …\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nphantom data for <code>THRESHOLD</code> and <code>TYPES</code>\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nThe data this certificate is for.  I.e the thing that was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreat the Genesis certificate\nCreat the Genesis certificate\nCreat the Genesis certificate\nCreat the Genesis certificate\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines whether or not a certificate is relevant (i.e. …\nDetermines whether or not a certificate is relevant (i.e. …\nCreates a new instance of <code>SimpleCertificate</code>\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nassembled signature for certificate aggregation\nProxy’s to <code>Membership.da_stake_table</code>\nProxy’s to <code>Membership.da_stake_table</code>\nProxy’s to <code>Membership.stake</code>\nProxy’s to <code>Membership.stake</code>\nCalculate a threshold based on the membership\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>QuorumCertificate2</code> into a <code>QuorumCertificate</code>\nConvert a <code>QuorumCertificate2</code> into a <code>QuorumCertificate</code>\nConvert a <code>QuorumCertificate</code> into a <code>QuorumCertificate2</code>\nConvert a <code>QuorumCertificate</code> into a <code>QuorumCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nConvert a <code>DaCertificate</code> into a <code>DaCertificate2</code>\nProxy’s to <code>Membership.total_nodes</code>\nProxy’s to <code>Membership.da_total_nodes</code>\nProxy’s to <code>Membership.da_total_nodes</code>\nGiven an upgrade certificate and a view, tests whether the …\nGiven an upgrade certificate and a view, tests whether the …\nValidate an upgrade certificate.\nValidate an upgrade certificate.\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\nWhich view this QC relates to\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\ncommitment of all the votes this cert should be signed over\nData used for a DA vote.\nData used for a DA vote.\nDA vote type alias\nDA vote 2 type alias\nA trait for types belonging for specific epoch\nData used for a yes vote. Used to distinguish votes sent …\nQuorum vote Alias. This type is useful to distinguish the …\nData used for a yes vote.\nData used for a yes vote.\nMarker that data should use the quorum cert type\nQuorum vote Alias\nQuorum vote Alias\nA simple yes vote over some votable type.\nData used for a timeout vote.\nData used for a timeout vote.\nTimeout Vote type alias\nTimeout Vote 2 type alias\nData used for an upgrade once epochs are implemented\nData used for a Upgrade vote.\nUpgrade proposal vote\nUpgrade proposal 2 vote\nA wrapper for vote data that carries a view number and an …\nData used for a Commit vote.\nData used for a Commit vote.\nView Sync Commit Vote type alias\nView Sync Commit Vote 2 type alias\nData used for a Finalize vote.\nData used for a Finalize vote.\nView Sync Finalize Vote type alias\nView Sync Finalize Vote 2 type alias\nData used for a Pre Commit vote.\nData used for a Pre Commit vote.\nView Sync Pre Commit Vote type alias\nView Sync Pre Commit Vote 2 type alias\nMarker trait for data or commitments that can be voted on. …\nMarker trait for data or commitments that can be voted on. …\nphantom data\nCreates and signs a simple vote\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nThe leaf commitment being voted on.\nunderlying vote data\nThe last view in which we are allowed to reach a decide on …\nReturns <code>Epoch</code>\nThe first epoch in which the upgrade will be in effect\nAn epoch to which the data belongs to. Relevant for …\nEpoch number\nEpoch number\nEpoch number\nEpoch number\nEpoch number\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA unique identifier for the specific protocol being voted …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommitment to the leaf\nCommitment to the leaf\nCreate a new <code>VersionedVoteData</code> struct\nCreate a new <code>VersionedVoteData</code> struct\nThe new version that we are upgrading to\nThe new version that we are upgrading to.\nThe first block for which the new version will be in …\nA unique identifier for the specific protocol being voted …\nThe old version that we are upgrading from\nThe old version that we are upgrading from.\nThe last block for which the old version will be in effect.\nCommitment to a block payload\nCommitment to a block payload\nThe relay this vote is intended for\nThe relay this vote is intended for\nThe relay this vote is intended for\nThe relay this vote is intended for\nThe relay this vote is intended for\nThe relay this vote is intended for\nThe view number we are trying to sync on\nThe view number we are trying to sync on\nThe view number we are trying to sync on\nThe view number we are trying to sync on\nThe view number we are trying to sync on\nThe view number we are trying to sync on\nSealed is used to make sure no other files can implement …\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nThe signature share associated with this vote\nConvert a <code>QuorumVote2</code> to a <code>QuorumVote</code>\nConvert a <code>QuorumVote2</code> to a <code>QuorumVote</code>\nConvert a <code>QuorumVote2</code> to a <code>QuorumVote</code>\nConvert a <code>ViewSyncPreCommitVote2</code> to a <code>ViewSyncPreCommitVote</code>\nConvert a <code>ViewSyncFinalizeVote2</code> to a <code>ViewSyncFinalizeVote</code>\nConvert a <code>ViewSyncCommitVote2</code> to a <code>ViewSyncCommitVote</code>\nConvert a <code>QuorumVote2</code> to a <code>QuorumVote</code>\nConvert a <code>ViewSyncFinalizeVote2</code> to a <code>ViewSyncFinalizeVote</code>\nConvert a <code>QuorumVote2</code> to a <code>QuorumVote</code>\nConvert a <code>ViewSyncCommitVote2</code> to a <code>ViewSyncCommitVote</code>\nConvert a <code>ViewSyncPreCommitVote2</code> to a <code>ViewSyncPreCommitVote</code>\nConvert a <code>QuorumVote2</code> to a <code>QuorumVote</code>\nConvert a <code>QuorumVote</code> to a <code>QuorumVote2</code>\nConvert a <code>QuorumVote</code> to a <code>QuorumVote2</code>\nConvert a <code>TimeoutVote</code> to a <code>TimeoutVote2</code>\nConvert a <code>ViewSyncPreCommitVote</code> to a <code>ViewSyncPreCommitVote2</code>\nConvert a <code>ViewSyncFinalizeVote</code> to a <code>ViewSyncFinalizeVote2</code>\nConvert a <code>ViewSyncCommitVote</code> to a <code>ViewSyncCommitVote2</code>\nConvert a <code>QuorumVote</code> to a <code>QuorumVote2</code>\nConvert a <code>QuorumVote</code> to a <code>QuorumVote2</code>\nConvert a <code>TimeoutVote</code> to a <code>TimeoutVote2</code>\nConvert a <code>ViewSyncPreCommitVote</code> to a <code>ViewSyncPreCommitVote2</code>\nConvert a <code>ViewSyncCommitVote</code> to a <code>ViewSyncCommitVote2</code>\nConvert a <code>ViewSyncFinalizeVote</code> to a <code>ViewSyncFinalizeVote2</code>\nversion applied to the view number\nView the timeout is for\nView the timeout is for\nview number\nThis implements commit for all the types which contain a …\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nThe view this vote was cast for\nOnly structs in this file can impl <code>Sealed</code>\nStake table entry\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the public key\nGet the public key\nGet the stake amount\nThe associated stake amount\nThe public key\nThis module defines the interaction layer with the Solver …\nAbstraction over the contents of a block\nContains the <code>ConsensusApi</code> trait.\nThe election trait, used to decide which node is the …\nThe <code>Metrics</code> trait is used to collect information from …\nNetwork access compatibility\nComposite trait for node behavior\nThe quorum certificate (QC) trait is a certificate of a …\nMinimal compatibility over public key signatures\nTrait for stake table data structures\nAbstractions over the immutable instance-level state and …\nAbstract storage type for storing DA proposals and VID …\nThe AuctionResultsProvider trait is the sole source of …\nFetches the auction result for a view. Does not cache the …\nHeader of a block, which commits to a <code>BlockPayload</code>.\nAbstraction over the full contents of a block\nInformation about builder fee for proposed block\nTrait for structures that need to be unambiguously encoded …\nError type for this type of block header\nThe error type for this type of block\nThe number of storage nodes to use when computing the …\nThe type of the instance-level state this state is …\nData created during block building which feeds into the …\nextra functions required on block to be usable by …\nAbstraction over any type of transaction. Used by …\nThe type of the transitions we are applying\nValidated State\nGet the block number.\nGet the builder commitment\nGenerate commitment that builders use to sign block …\nBuild the payload and metadata for genesis/null block.\nEncode <code>&amp;self</code>\nAccount authorizing the fee.\nProposed fee amount\nSignature over fee amount by <code>fee_account</code>.\nReturns the argument unchanged.\nBuild a payload with the encoded transaction bytes, …\nBuild a payload and associated metadata with the …\ngenerate a genesis block\nBuild the genesis header, payload, and metadata.\nGet the results of the auction for this Header. Only used …\nCalls <code>U::from(self)</code>.\nGet the metadata.\nThe function to estimate the transaction size It takes in …\nBuild a header with the parent validate state, …\nBuild a header with the parent validate state, …\nNumber of transactions in the block.\nGet the payload commitment.\nCompute the VID payload commitment along with precompute …\nList of transaction commitments.\nGet the transactions in the payload.\nthe number of transactions in this block\nCompute the VID payload commitment. TODO(Gus) delete this …\nThe API that tasks use to talk to the system TODO we plan …\nThe maximum amount of time a leader can wait to get a …\nGet a reference to the private key.\nGet a reference to the public key.\nNotify the system of an event within <code>hotshot-consensus</code>.\nTotal number of nodes in the network. Also known as <code>n</code>.\nThe error type returned by methods like <code>lookup_leader</code>.\nA protocol for determining membership in and participating …\nGet all leaders in the committee for a specific view for a …\nGet all participants in the committee for a specific view …\nGet all participants in the committee for a specific view …\nGet the DA stake table entry for a public key, returns <code>None</code>…\nGet all participants in the committee (including their …\nReturns the DA threshold for a specific <code>Membership</code> …\nReturns the number of total DA nodes in the committee in …\nReturns the threshold for a specific <code>Membership</code> …\nSee if a node has stake in the committee in a specific …\nSee if a node has stake in the committee in a specific …\nThe leader of the committee for view <code>view_number</code> in <code>epoch</code>.\nThe leader of the committee for view <code>view_number</code> in <code>epoch</code>.\nCreate a committee\nGet the stake table entry for a public key, returns <code>None</code> …\nGet all participants in the committee (including their …\nReturns the threshold for a specific <code>Membership</code> …\nReturns the number of total nodes in the committee in an …\nReturns the threshold required to upgrade the network …\nAn ever-incrementing counter\nA family of related counters, partitioned by their label …\nA gauge that stores the latest value.\nA family of related gauges, partitioned by their label …\nA histogram which will record a series of points.\nA family of related histograms, partitioned by their label …\nThe metrics type.\nA family of related metrics, partitioned by their label …\nUse this if you’re not planning to use any metrics. All …\nA family of related text metrics, partitioned by their …\nAdd a value to the counter\nAdd a point to this histogram.\nCreate a new <code>Box&lt;dyn Metrics&gt;</code> with this <code>NoMetrics</code>\nCreate a family of related counters, partitioned by their …\nInstantiate a metric in this family with a specific label …\nCreate a <code>Counter</code> with an optional <code>unit_label</code>.\nCreate a <code>Gauge</code> with an optional <code>unit_label</code>.\nCreate a <code>Histogram</code> with an optional <code>unit_label</code>.\nCreate a text metric.\nReturns the argument unchanged.\nCreate a family of related gauges, partitioned by their …\nCreate a family of related histograms, partitioned by …\nCalls <code>U::from(self)</code>.\nSet the gauge value\nCreate a subgroup with a specified prefix.\nCreate a family of related text metricx, partitioned by …\nUpdate the gauge value\nA channel generator for types that need asynchronous …\nAn asynchronous network. Packets may be dropped entirely …\nbroadcast the message to all\nWhen a message should be broadcast to the network.\nFailed to receive over a channel\nFailed to send over a channel\nA chaotic network using all the networking calls\nA configuration error\nrepresents a networking implmentration exposes low level …\nThe <code>Da</code> topic goes out to only the DA committee\nbroadcast to DA committee\nRequest a DA proposal for a certain view\nA request for some data that the consensus layer is asking …\nThe Request was denied\ndirectly transmit\nFailed to deserialize\nFailed to serialize\nPeer returned us some data\nThe <code>Global</code> topic goes out to all nodes\nTrait that bundles what we need from a request ID\nAn error occurred while attempting to listen\nFailed to look up a node on the network\nAn error occurred while receiving a message\nAn error occurred while sending a message\nMultiple errors. Allows us to roll up multiple errors into …\nChanges that can occur in the network\nErrors that can occur in the network\ninterface describing how reliable the network is\nA node is connected\nA node is disconnected\nBroadcast the message immediately\nPeer failed to get us data\nThe network was not ready yet\nAn partially synchronous network. Behaves asynchronously …\nideal network\nRequest for quorum proposal for a view\nCentralized server specific errors\nThe network request had been cancelled before it could be …\nUnderlying data request\nA response for a request.  <code>SequencingMessage</code> is the same …\nThe network has been shut down and can no longer be used\nA synchronous network. Packets may be delayed, but are …\nDescribes additional functionality needed by the test …\nTimed out performing an operation\nUsed when broadcasting messages\nthe type of transmission\nThe feature is unimplemented\nRequest VID data by our key and the VID commitment\nDelay the broadcast to a given view.\na message\nasynchronous portion of network\nbroadcast message to some subset of nodes blocking\ngiven a message and a way to send the message, decide …\nbroadcast a message only to a DA committee blocking\nMax value in milliseconds that a packet may be delayed\nhighest value in milliseconds that a packet may be delayed\nhighest value in milliseconds that a packet may be delayed\nLowest value in milliseconds that a packet may be delayed\nlowest value in milliseconds that a packet may be delayed\nlowest value in milliseconds that a packet may be delayed\nSends a direct message to a specific node blocking\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\ngenerates a network given an expected node count\ntime when GST occurs\nGet the number of messages in-flight.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIs primary network down? Makes sense only for combined …\ndenominator for probability of keeping packets\ndenominator for probability of keeping packets\nnumerator for probability of keeping packets\nnumerator for probability of keeping packets\ncreate new <code>SynchronousNetwork</code>\ncreate new <code>AsynchronousNetwork</code>\ncreate new <code>PartiallySynchronousNetwork</code>\nPauses the underlying network\nqueues lookup of a node\nReceive one or many messages from the underlying network.\nhighest value of repeats for a message\nlowest value of repeats for a message\nRequest\nResumes the underlying network\nsample from uniform distribution to decide whether or not …\nSample from bernoulli distribution to decide whether or …\nnever drop a packet\nnever drop a packet\nnumber of times to repeat the packet\nscramble the packet\nBlocks until the network is shut down\nsignature of the Sha256 hash of the data so outsiders can…\nwhen the network was started\nsynchronous portion of network\nUpdate view can be used for any reason, but mostly it’s …\nsend messages with vid shares to its recipients blocking\nView this message is for\nget the view out of the message\nBlocks until the network is successfully initialized\nThe AuctionSolverResult is a type that holds the data …\nThe auction results type for Solver interactions\nThe base version of HotShot this node is instantiated with.\nThe block header type that this hotshot setup is using.\nThe block type that this hotshot setup is using.\nThe type builder uses to sign its messages\nTrait for time compatibility needed for reward collection\nconstant for epoch height\nSame as above but for epoch.\nThe version at which to switch over to epochs logic\nThis trait guarantees that a particular type has urls that …\nThe instance-level state type that this hotshot setup is …\nThe version at which to switch over to marketplace logic\nMembership used for this implementation\nThe underlying network type\nNode implementation aggregate trait\nTrait with all the type definitions that are used in the …\nThe signature key that this hotshot setup is using.\nStorage for DA layer interactions\nextra functions required on a node implementation to be …\nThe transaction type that this hotshot setup is using.\nThe hash for the upgrade.\nThe version of HotShot this node may be upgraded to. Set …\nThe validated state type that this hotshot setup is using.\nVersion information for HotShot\nThe time type that this hotshot setup is using.\ngenerate a genesis block\nGenerate the communication channels for testing\nCreate a new instance of this time unit at time number 0\nCreates random transaction if possible otherwise panics …\nCreate a new instance of this time unit\nCreates random transaction if possible otherwise panics …\nthe number of transactions in a block\nGet the u64 format of time\nReturns the builder url associated with the datatype\nAllows to fix the size of the message at compilation time.\nType of the actual quorum certificate object\nPublic parameters for generating the QC E.g: snark …\nPublic parameters for validating the QC E.g: verifying …\nTrait for validating a QC built from different signatures …\nType of the quorum size (e.g. number of votes or …\nComputes an aggregated signature from a set of partial …\nChecks an aggregated signature over some message provided …\nProduces a partial signature on a message with a single …\nTrace the list of signers given a qc.\nThe type of the keys builder would use to sign its messages\nThe type of the signature builder would use to sign its …\nBuilder Signature Key trait with minimal requirements\nThe private key type for this signature algorithm\nTrait for abstracting private signature key\nThe type of the assembled signature, without <code>BitVec</code>\nThe type of the quorum certificate parameters used for …\nThe type of the assembled qc: assembled signature + <code>BitVec</code>\nType of error that can occur when signing data\nType of error that can occur when signing data\nTrait for abstracting public key signatures Self is the …\nThe type of the entry that contain both public key and …\nType representing stake table entries in a <code>StakeTable</code>\nAggregate all inputs used for signature over block info\nAggregate all inputs used for signature over fee data\nAggregate all inputs used for signature over fee data\nassemble the signature from the partial signature and the …\ncheck the quorum certificate for the assembled signature\nDeserialize the private key from bytes\nDeserialize a public key from bytes\nProduce a public key from a private key\nGenerate a new key pair\nGenerate a new key pair\ngenerates the genesis public key. Meant to be dummy/filler\nGet the public key\nonly get the public key from the stake table entry\nget the public parameter for the assembled signature …\nget the assembled signature and the <code>BitVec</code> separately from …\nProduce a signature\nsign information about offered block\nsign the message with the builder’s private key\nsign transactions (marketplace version)\nsign sequencing fee offer for proposed payload\nsign fee offer for proposed payload (marketplace version)\nGet the stake value\nget the stake table entry from the public key and stake …\nSerialize the private key into bytes\nSerialize a public key to bytes\nSerialize the private key into TaggedBase64 blob.\nValidate a signature\nvalidate signature over block information with the builder…\nvalidate the message with the builder’s public key\nvalidate the bundle’s signature using the builder’s …\nvalidate signature over sequencing fee information with …\nvalidate signature over sequencing fee information with …\ntype for the staked amount\nAuxiliary information associated with the key\nat arbitrary block height\ntype for the commitment to the current stake table\nmarks the snapshot at the beginning of the current epoch\nKey already exists\nthe latest “Head” where all new changes are applied to\nInsufficient fund: the number of stake cannot be negative\ntype for the iterator over (key, value) entries\ntype for stake key\nKey not found\nmarks the beginning of the last epoch\ntype for the proof associated with the lookup result (if …\nMalformed Merkle proof\nKey mismatched\nInternal error caused by Rescue\nThe historical snapshot requested is not supported.\nSnapshots of the stake table\nThe number of stake exceed U256\nError type for <code>StakeTableScheme</code>\nCommon interfaces required for a stake table used in …\nVerification Error\nBatch deregister a list of keys. A default implementation …\nBatch register a list of new keys. A default …\nBatch update the stake balance of <code>keys</code>. Read documentation …\nReturns the commitment to the <code>version</code> of stake table.\nReturns true if <code>key</code> is currently registered, else returns …\nDeregister an existing key from the stake table. Returns …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the number of keys in the <code>version</code> of the table.\nReturns the stakes withhelded by a public key.\nReturn the associated stake amount and auxiliary …\nReturns the stakes withhelded by a public key along with a …\nRegister a new key into the stake table.\nRandomly sample a (key, stake amount) pair proportional to …\nReturns the accumulated stakes of all registered keys of …\nReturns an iterator over all (key, value) entries of the …\nUpdate the stake of the <code>key</code> with …\nThe type of the state delta this state is associated with.\nThe error type for this particular type of ledger state\nThe type of the instance-level state this state is …\nInstance-level state, which allows us to fetch missing …\nApplication-specific state delta, which will be used to …\nextra functions required on state to be usable by …\nTime compatibility needed for reward collection\nAbstraction over the state that blocks modify\nCreates random transaction if possible otherwise panics …\nConstruct the state with the given block header.\nConstruct a genesis validated state.\nGets called to notify the persistence backend that this …\nCheck if the proposed block header is valid and apply it …\nAbstraction for storing a variety of consensus payload …\nAdd a proposal to the stored DA proposals.\nAdd a proposal to the stored DA proposals.\nAdd a proposal we sent to the store\nAdd a proposal we sent to the store\nAdd a proposal to the stored VID proposals.\nAdd a proposal to the stored VID proposals.\nMigrate leaves from <code>Leaf</code> to <code>Leaf2</code>, and proposals from …\nRecord a HotShotAction taken.\nUpgrade the current decided upgrade certificate in storage.\nUpdate the current high QC in storage.\nUpdate the current high QC in storage.\nUpdate the current high QC in storage.\nUpdate the currently undecided state of consensus.  This …\nUpdate the currently undecided state of consensus.  This …\nHolds configuration for the upgrade task.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUnix time in seconds at which we start proposing an upgrade\nView to start proposing an upgrade\nUnix time in seconds at which we start voting on an upgrade\nView to start voting on an upgrade\nUnix time in seconds at which we stop proposing an …\nView to stop proposing an upgrade. To prevent proposing an …\nUnix time in seconds at which we stop voting on an …\nView to stop voting on an upgrade. To prevent voting on an …\nCommitment that builders use to sign block options. A thin …\nA pending view with an available block but not leaf …\nA helper enum to indicate whether a node is in the epoch …\nStop right before this view number\nLeaf has failed\nA node is currently in the epoch transition\nStop including this view number\nUndecided view\nThe hash of a leaf.\nA node is not in the epoch transition\nA struct containing information about a finished round.\nType alias for byte array of SHA256 digest length\nOptional validated state and state delta.\nWhether or not to stop inclusively or exclusively when …\nThis exists so we can perform state transitions mutably\nA view’s state\nFor the wire format, we use bincode with the following …\nReturns <code>Epoch</code> if possible\nReturns an epoch number given a block number and an epoch …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate new commitment for <code>data</code>\nCreate a new commitment from a raw Sha256 digest\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the given block number is the last in the …\nReturn the underlying undecide leaf commitment and …\nreturn the underlying leaf hash if it exists\nA function for generating a cute little user mnemonic from …\nreturn the underlying block paylod commitment if it exists\nreturn the underlying validated state if it exists\nReturn the underlying validated state and state delta if …\nThe view data. Wrapped in a struct so we can mutate\nThe round that finished\nOptional state delta.\nAn epoch to which the data belongs to. Relevant for …\nAn epoch to which the data belongs to. Relevant for …\nProposed leaf\nPayload commitment to the available block.\nValidated state.\nHolds configuration for a validator node\nReturns the argument unchanged.\nread the validator config from a file\nCalls <code>U::from(self)</code>.\nWhether or not we are DA\nThe validator’s index, which can be treated as another …\nThe validator’s seed\nInternal Jellyfish VID scheme\nPrivate type alias for the EC pairing type parameter for …\nPrivate type alias for the hash type parameter for <code>Advz</code>.\nSRS comment\nNewtype wrapper for a large payload range proof.\nNewtype wrapper for a small payload range proof.\nVID commitment type\nVID common type\nVID PrecomputeData type\nVID proposal type\nNewtype wrapper for a VID scheme type that impls <code>VidScheme</code>…\nVID share type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVID scheme constructor.\nConvert a [<code>Statement&lt;&#39;_, VidSchemeType&gt;</code>] to a […\nConvert a <code>VidDisperse&lt;Advz&gt;</code> to a <code>VidDisperse&lt;VidSchemeType&gt;</code>…\nThe certificate formed from the collection of signatures a …\nType of data commitment this vote uses.\nAny type that is associated with a view\nMapping of vote commitment to signatures and bitvec\nThreshold Functions\nA simple vote that has a signer and commitment to the data …\nAccumulates votes until a certificate is formed.  This …\nMapping of commitments to vote tokens by key.\nThe data commitment this certificate certifies.\nAdd a vote to the total accumulated votes for the given …\nBuild a certificate from the data commitment and the …\nGet the commitment which was voted on\nGets the Data commitment of the vote\nGet the vote commitment which the votes commit to\nGets the data which was voted on by this vote\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChecks if the cert is valid in the given epoch\nPhantom data to specify the types this accumulator is for\nGet the signature of the vote sender\nA bitvec to indicate which node is active and send out a …\nGets the public signature key of the votes creator/sender\nGet  Stake Table from Membership implementation.\nGet  <code>StakeTableEntry</code> from Membership implementation.\nReturns the amount of stake needed to create this …\nGet Total Nodes from Membership implementation.\nversion information\nReturns the view number the type refers to.\nMap of all signatures accumulated so far")