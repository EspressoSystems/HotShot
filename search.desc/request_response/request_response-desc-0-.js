searchState.loadedDescShard("request_response", 0, "This crate contains a general request-response protocol. …\nAn active request. This is what we use to track a request …\nThe inner implementation of an active request\nA type alias for the active request map\nA type alias for the list of tasks that are validating …\nThe request was invalid\nOther errors\nA type alias for the list of tasks that are responding to …\nThe errors that can occur when making a request for data\nA type alias for the hash of a request\nA protocol that allows for request-response communication. …\nThe underlying configuration for the request-response …\nBuilder for <code>RequestResponseConfig</code>.\nError type for RequestResponseConfigBuilder\nThe inner implementation for the request-response protocol\nA trait for serializing and deserializing a type to and …\nThe request timed out\nUninitialized field\nCustom validation error\nA handle to the receiving task. This will automatically …\nThe map of currently active requests\nA copy of the map of currently active requests\nBuilds a new <code>RequestResponseConfig</code>.\nThe configuration of the protocol\nCreate an empty builder, with all fields set to <code>None</code> or …\nThe data source trait. Is what we use to derive the …\nThe data source to use for the protocol\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDeserialize the type from a byte array\nHandle a request sent to us\nHandle a response sent to us\nThe timeout for incoming requests. Do not respond to a …\nThe timeout for incoming requests. Do not respond to a …\nThe timeout for incoming requests. Do not respond to a …\nThe inner <code>VecDeque</code>\nThe inner <code>VecDeque</code>\nThe inner implementation of the request-response protocol\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe maximum (global) number of incoming responses that can …\nThe maximum (global) number of incoming responses that can …\nThe maximum (global) number of incoming responses that can …\nThe maximum (global) number of outgoing responses that can …\nThe maximum (global) number of outgoing responses that can …\nThe maximum (global) number of outgoing responses that can …\nThe maximum size of the <code>VecDeque</code>\nThe maximum size of the <code>VecDeque</code>\nThe message type. Is the base type for all messages in the …\nThe network traits. Is what we use to send and receive …\nCreate a new [<code>RequestResponseProtocol</code>]\nPhantom data to help with type inference\nThe receiver to use for the protocol\nThe task responsible for receiving messages from the …\nThe recipient source trait. Is what we use to get the …\nThe recipient source to use for the protocol\nThe request trait. Is what we use to define a request and …\nRequest something from the protocol and wait for the …\nThe request that we are waiting for a response to\nThe time to wait (per request) between sending out batches …\nThe time to wait (per request) between sending out batches …\nThe time to wait (per request) between sending out batches …\nThe batch size for outgoing requests. This is the number …\nThe batch size for outgoing requests. This is the number …\nThe batch size for outgoing requests. This is the number …\nThe hash of the request. We need this so we can remove …\nRequest something from the protocol indefinitely until we …\nThe maximum amount of time we will spend trying to both …\nThe maximum amount of time we will spend trying to both …\nThe maximum amount of time we will spend trying to both …\nThe maximum amount of time we will spend trying to …\nThe maximum amount of time we will spend trying to …\nThe maximum amount of time we will spend trying to …\nThe sender to use for the protocol\nThe sender to use for the protocol\nSerialize the type to a byte array. If this is for a …\nUtility types and functions\nThe trait that allows the [<code>RequestResponseProtocol</code>] to …\nCalculate/derive the response for a specific request\nThe outer message type for the request-response protocol. …\nA request\nA request message, which includes the requester’s public …\nA response\nA response message, which includes the hash of the request …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert bytes to a <code>Message</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new signed request message from a request\nThe requester’s public key\nA helper function to read a length-prefixed value from a …\nA helper function to read to the end of the reader\nThe actual request data. This is from the application\nThe hash of the application-specific request we’re …\nThe actual response content\nThe requester’s signature over the [the actual request …\nThe timestamp of when the request was sent (in seconds …\nConverts any <code>Message</code> to bytes if the content is also …\nValidate the <code>RequestMessage</code>, checking the signature and …\nA helper function to write a length-prefixed value to a …\nA type alias for a shareable byte array\nThe <code>Receiver</code> trait is used to allow the […\nThe <code>Sender</code> trait is used to allow the […\nReceive a message. Returning an error here means the …\nSend a message to the specified recipient\nA trait that allows the [<code>RequestResponseProtocol</code>] to get …\nGet all the recipients that the specific request should …\nA trait for a request. Associates itself with a response …\nA trait that a response needs to implement\nThe response type associated with this request\nValidate the request, returning an error if it is not valid\nValidate the response, making sure it is valid for the …\nA <code>VecDeque</code> with a maximum size\nReturns the argument unchanged.\nThe inner <code>VecDeque</code>\nCalls <code>U::from(self)</code>.\nThe maximum size of the <code>VecDeque</code>\nCreate a new bounded <code>VecDeque</code> with the given maximum size\nPush an item into the bounded <code>VecDeque</code>, removing the …")